// Laboratornaya2_1.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <conio.h>
#include <clocale>
#include <locale.h>
#include "ancetastud.h"
//Константа хранит количество элементов массива преподователей


int main()
{
    setlocale(LC_ALL, "RUS");
    ancetastud spisokstud[N]; //Массив в котором будут хранится данные cтудентов
    ancetastud *spisokstud2;  //Указатель на массив в котором будут хранится данные студентов

    char pustayastroka[N];   //Пустая строка для инициализации
    ancetastud *SP,*SP2;     //Указатели на массивы студентов статический и динамический
    strcpy(pustayastroka,"");
     
        
    int a, //Переменная отвечающая за выбор строчки в меню
        n=0,//Количество студентов
        i,//Индекс массива студентов
        m=0,//Количество студентов(динамический)
        j;//Индекс массива студентов(динамический)
    //Провожу инициализацию массива студентов
    for (i = 0; i++; i < N)
    {
        SP = &(spisokstud[i]);
        initializationstud1(SP, pustayastroka, 0, 0, 0, typchik::DVO);
    }
    //Выделяю память для динамического массива студентов
    spisokstud2 = (struct ancetastud*)malloc(sizeof(struct ancetastud)*N);

    do {
        do {
            printf("Выберите действие в меню\n");
            printf(" 1 - Ввод данных о студентах\n");
            printf(" 2 - Ввод данных о cтудентах(динамический массив) \n");
            printf(" 3 - Вывод данных о студентах\n");
            printf(" 4 - Вывод данных о cтудентах(динамический массив)\n");
            printf(" 5 - Поиск по имени среди студентов\n");
            printf(" 6 - Поиск по имени среди cтудентов(динамический массив)\n");
            printf(" 7 - Поиск по рейтингу среди cтудентов\n");
            printf(" 8 - Выход из системы\n");
            while (scanf("%d", &a) != 1) //Проверка ввода если пользователь  введет не цифру
            {
                while (getchar() != '\n');
                printf("Ошибка. Введите число от 1 до 7 включительно: ");
            }
        } while ((a < 1) || (a > 7));

        if (a == 1)
        {
            printf("Ввод данных о студентах\n");
            do {
                printf("\n Введите количество студентов n (n<20): ");
                while (scanf("%d", &n) != 1) //Проверка ввода если пользователь введет введет не цифру
                {
                    while (getchar() != '\n');
                    printf("Ошибка. Введите число от как показано в примере : ");
                }
                while (getchar() != '\n');
            } while (n < 1 || n>20);
            for (i = 0; i < n; i++)
            {
                printf("Студент %d \n", (i + 1));
                SP = &(spisokstud[i]);
                inputstud1(SP);
            }
        }
        if (a == 2)
        {
            printf("Ввод данных о студентах(динамический)\n");
            do 
            {
                printf("\n Введите количество студентов m (m<20): ");
                while (scanf("%d", &m) != 1) //Проверка ввода если пользователь введет введет не цифру
                {
                    while (getchar() != '\n');
                    printf("Ошибка. Введите число от как показано в примере : ");
                }
                while (getchar() != '\n');
            } while (m < 1 || m>20);
            for (j = 0; j < m; j++)
            {
                printf("Студент %d \n", (j + 1));
                SP2 = &(*(spisokstud2 + j));
                inputstud1(SP2);
            }
        } 
        if (a == 3)
        {
            if (n != 0) 
            {
                printf("Вывод данных о студентах\n");
                for (i = 0; i < n; i++)
                {
                    outputstud1(spisokstud[i]);
                }
            }
            else
            {
                printf("Сначала введите данные хотя бы об одном студенте\n");
            }
        }
        if (a == 4)
        {
            if (m != 0)
            {
                printf("Вывод данных о преподователях\n");
                for (j = 0; j < m; j++)
                {
                    outputstud1(*(spisokstud2 + j));
                    //outputprepod( (*(spisokprepod + j))->getfio());
                }
            }
            else
            {
                printf("Сначала введите данные хотя бы об одном преподователе\n");
            }
        }
        if (a == 5)
        {
            
            int f3 = 0;
            if (n != 0)
            {
                char zap1 [N];
                printf("Поиск по имени среди студентов\n");
                while (getchar() != '\n');
                printf("Введите ФИО студента\n");
                gets_s(zap1);
                f3 = searchbynamestud1(spisokstud, zap1);
                printf("\n Всего найдено студентов с таким именем: %d\n ", f3);
                
            }
            else
            {
                printf("Сначала введите данные хотя бы об одном студенте\n");
            }
        }
        if (a == 6)
        {
            int f4 = 0;
            if (m != 0)
            {
                char zap2[N];
                printf("Поиск по имени среди студентов\n");
                while (getchar() != '\n');
                printf("Введите ФИО студента\n");
                gets_s(zap2);
                f4 = searchbynamestud1(spisokstud2, zap2);
                printf("\n Всего найдено студентов с таким именем: %d\n ", f4);

            }
            else
            {
                printf("Сначала введите данные хотя бы об одном студенте\n");
            }
        }
        if (a == 7)
        {
            int f5 = 0;
            if (n != 0)
            {
                int zap3;
                printf("Поиск по имени среди студентов\n");
                while (getchar() != '\n');
                printf("Введите рейтинг студента\n");
                do {
                    printf(" Рейтинг студента:(от 0 до 100) ");
                    while (scanf("%d", &zap3) != 1) //Проверка ввода если пользователь  введет не цифру
                    {
                        while (getchar() != '\n');
                        printf("Ошибка. Введите число как показано в примере: ");
                    }
                } while ((zap3 < 0) || (zap3 > 100));
                f5 = searchbyreiting1(spisokstud, zap3);
                printf("\n Всего найдено студентов с таким рейтингом: %d\n ", f5);

            }
            else
            {
                printf("Сначала введите данные хотя бы об одном студенте\n");
            }
        }

    } while (a != 8);
    printf("\nВы вышли из системы\n");

    free(spisokstud2); //Очищаю память динамического массива структур
    
  

    
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
